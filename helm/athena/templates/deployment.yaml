apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ .Release.Namespace }}
  name: {{ .Values.name }}
  labels:
    {{- include "athena.labels.common" . | nindent 4 }}
spec:
  replicas: 3
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      {{- include "athena.labels.selector" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "athena.labels.common" . | nindent 8 }}
      annotations:
        releaseRevision: {{ .Release.Revision | quote }}
    spec:
      volumes:
      - name: "{{ .Values.name }}-configmap"
        configMap:
          name: "{{ .Values.name }}-configmap"
          items:
          - key: config.yaml
            path: config.yaml
      - name: "{{ .Values.name }}-secret"
        secret:
          secretName: "{{ .Values.name }}-secret"
          items:
          - key: secret.yaml
            path: secret.yaml
      securityContext:
        runAsUser: {{ .Values.userID }}
        runAsGroup: {{ .Values.groupID }}
        {{ - with .Values.podSecurityContext }}
          {{ - . | toYaml | nindent 8 }}
        {{- end }}
      containers:
      - name: {{ .Values.image.name }}
        image: "{{ .Values.registry.domain }}/{{ .Values.image.repository }}:{{ .Chart.AppVersion }}"
        imagePullPolicy: Always
        env:
        - name: ATHENA_KUBERNETES_CACERT
          valueFrom:
            configMapKeyRef:
              name: "kube-root-ca.crt"
              key: "ca.crt"
        args:
        - "daemon"
        - "--config-dir=/var/run/{{ .Values.name }}/configmap/"
        - "--config-file=config"
        - "--secret-dir=/var/run/{{ .Values.name }}/secret/"
        - "--secret-file=secret"
        ports:
        - containerPort: 8000
          name: http
        securityContext:
          {{- with .Values.securityContext }}
            {{- . | toYaml | nindent 10 }}
          {{- end }}
        resources:
          requests:
            cpu: 100m
            memory: 30Mi
          limits:
            cpu: 250m
            memory: 250Mi
        volumeMounts:
        - name: "{{ .Values.name }}-configmap"
          mountPath: "/var/run/{{ .Values.name }}/configmap/"
          readOnly: true
        - name: "{{ .Values.name }}-secret"
          mountPath: "/var/run/{{ .Values.name }}/secret/"
          readOnly: true
        livenessProbe:
          httpGet:
            path: /
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 30
          timeoutSeconds: 1
        readinessProbe:
          httpGet:
            path: /
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 30
          timeoutSeconds: 1
      imagePullSecrets:
      - name: "{{ .Values.name }}-pull-secret"
      serviceAccountName: {{ .Values.name }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                    - {{ .Values.name }}
              topologyKey: kubernetes.io/hostname
